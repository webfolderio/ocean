package io.webfolder.ocean.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;

import io.webfolder.ocean.client.internal.JSON;

/**
 * NewVolumeExt4
 */
@JsonPropertyOrder({ NewVolumeExt4.JSON_PROPERTY_ID, NewVolumeExt4.JSON_PROPERTY_DROPLET_IDS,
        NewVolumeExt4.JSON_PROPERTY_NAME, NewVolumeExt4.JSON_PROPERTY_DESCRIPTION,
        NewVolumeExt4.JSON_PROPERTY_SIZE_GIGABYTES, NewVolumeExt4.JSON_PROPERTY_CREATED_AT,
        NewVolumeExt4.JSON_PROPERTY_TAGS, NewVolumeExt4.JSON_PROPERTY_SNAPSHOT_ID, NewVolumeExt4.JSON_PROPERTY_REGION,
        NewVolumeExt4.JSON_PROPERTY_FILESYSTEM_LABEL })
@JsonIgnoreProperties(value = "filesystem_type", // ignore manually set filesystem_type, it will be
                                                 // automatically generated by Jackson during
                                                 // serialization
        allowSetters = true // allows the filesystem_type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "filesystem_type", visible = true)
@JsonSubTypes({ @JsonSubTypes.Type(value = NewVolumeExt4.class, name = "EXT4"),
        @JsonSubTypes.Type(value = NewVolumeXfs.class, name = "XFS"), })

public class NewVolumeExt4 extends VolumeWriteFileSystemType {
    public static final String JSON_PROPERTY_ID = "id";
    private String id;

    public static final String JSON_PROPERTY_DROPLET_IDS = "droplet_ids";
    private List<Integer> dropletIds = null;

    public static final String JSON_PROPERTY_NAME = "name";
    private String name;

    public static final String JSON_PROPERTY_DESCRIPTION = "description";
    private String description;

    public static final String JSON_PROPERTY_SIZE_GIGABYTES = "size_gigabytes";
    private Integer sizeGigabytes;

    public static final String JSON_PROPERTY_CREATED_AT = "created_at";
    private String createdAt;

    public static final String JSON_PROPERTY_TAGS = "tags";
    private List<String> tags = null;

    public static final String JSON_PROPERTY_SNAPSHOT_ID = "snapshot_id";
    private String snapshotId;

    public static final String JSON_PROPERTY_REGION = "region";
    private RegionSlug region;

    public static final String JSON_PROPERTY_FILESYSTEM_LABEL = "filesystem_label";
    private String filesystemLabel;

    public NewVolumeExt4() {
    }

    @JsonCreator
    public NewVolumeExt4(@JsonProperty(JSON_PROPERTY_ID) String id,
            @JsonProperty(JSON_PROPERTY_DROPLET_IDS) List<Integer> dropletIds,
            @JsonProperty(JSON_PROPERTY_CREATED_AT) String createdAt) {
        this();
        this.id = id;
        this.dropletIds = dropletIds;
        this.createdAt = createdAt;
    }

    /**
     * The unique identifier for the block storage volume.
     *
     * @return id
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getId() {
        return id;
    }

    /**
     * An array containing the IDs of the Droplets the volume is attached to. Note
     * that at this time, a volume can only be attached to a single Droplet.
     *
     * @return dropletIds
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DROPLET_IDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<Integer> getDropletIds() {
        return dropletIds;
    }

    public NewVolumeExt4 name(String name) {
        this.name = name;
        return this;
    }

    /**
     * A human-readable name for the block storage volume. Must be lowercase and be
     * composed only of numbers, letters and \&quot;-\&quot;, up to a limit of 64
     * characters. The name must begin with a letter.
     *
     * @return name
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setName(String name) {
        this.name = name;
    }

    public NewVolumeExt4 description(String description) {
        this.description = description;
        return this;
    }

    /**
     * An optional free-form text field to describe a block storage volume.
     *
     * @return description
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_DESCRIPTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getDescription() {
        return description;
    }

    @JsonProperty(JSON_PROPERTY_DESCRIPTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDescription(String description) {
        this.description = description;
    }

    public NewVolumeExt4 sizeGigabytes(Integer sizeGigabytes) {
        this.sizeGigabytes = sizeGigabytes;
        return this;
    }

    /**
     * The size of the block storage volume in GiB (1024^3).
     *
     * @return sizeGigabytes
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_SIZE_GIGABYTES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getSizeGigabytes() {
        return sizeGigabytes;
    }

    @JsonProperty(JSON_PROPERTY_SIZE_GIGABYTES)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setSizeGigabytes(Integer sizeGigabytes) {
        this.sizeGigabytes = sizeGigabytes;
    }

    /**
     * A time value given in ISO8601 combined date and time format that represents
     * when the block storage volume was created.
     *
     * @return createdAt
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CREATED_AT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getCreatedAt() {
        return createdAt;
    }

    public NewVolumeExt4 tags(List<String> tags) {
        this.tags = tags;
        return this;
    }

    public NewVolumeExt4 addTagsItem(String tagsItem) {
        if (this.tags == null) {
            this.tags = new ArrayList<>();
        }
        this.tags.add(tagsItem);
        return this;
    }

    /**
     * A flat array of tag names as strings to be applied to the resource. Tag names
     * may be for either existing or new tags.
     *
     * @return tags
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TAGS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<String> getTags() {
        return tags;
    }

    @JsonProperty(JSON_PROPERTY_TAGS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTags(List<String> tags) {
        this.tags = tags;
    }

    public NewVolumeExt4 snapshotId(String snapshotId) {
        this.snapshotId = snapshotId;
        return this;
    }

    /**
     * The unique identifier for the volume snapshot from which to create the
     * volume.
     *
     * @return snapshotId
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SNAPSHOT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getSnapshotId() {
        return snapshotId;
    }

    @JsonProperty(JSON_PROPERTY_SNAPSHOT_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSnapshotId(String snapshotId) {
        this.snapshotId = snapshotId;
    }

    public NewVolumeExt4 region(RegionSlug region) {
        this.region = region;
        return this;
    }

    /**
     * Get region
     *
     * @return region
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_REGION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public RegionSlug getRegion() {
        return region;
    }

    @JsonProperty(JSON_PROPERTY_REGION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setRegion(RegionSlug region) {
        this.region = region;
    }

    public NewVolumeExt4 filesystemLabel(String filesystemLabel) {
        this.filesystemLabel = filesystemLabel;
        return this;
    }

    /**
     * Get filesystemLabel
     *
     * @return filesystemLabel
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_FILESYSTEM_LABEL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getFilesystemLabel() {
        return filesystemLabel;
    }

    @JsonProperty(JSON_PROPERTY_FILESYSTEM_LABEL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFilesystemLabel(String filesystemLabel) {
        this.filesystemLabel = filesystemLabel;
    }

    /**
     * Return true if this new_volume_ext4 object is equal to o.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NewVolumeExt4 newVolumeExt4 = (NewVolumeExt4) o;
        return Objects.equals(this.id, newVolumeExt4.id) && Objects.equals(this.dropletIds, newVolumeExt4.dropletIds)
                && Objects.equals(this.name, newVolumeExt4.name)
                && Objects.equals(this.description, newVolumeExt4.description)
                && Objects.equals(this.sizeGigabytes, newVolumeExt4.sizeGigabytes)
                && Objects.equals(this.createdAt, newVolumeExt4.createdAt)
                && Objects.equals(this.tags, newVolumeExt4.tags)
                && Objects.equals(this.snapshotId, newVolumeExt4.snapshotId)
                && Objects.equals(this.region, newVolumeExt4.region)
                && Objects.equals(this.filesystemLabel, newVolumeExt4.filesystemLabel) && super.equals(o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, dropletIds, name, description, sizeGigabytes, createdAt, tags, snapshotId, region,
                filesystemLabel, super.hashCode());
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class NewVolumeExt4 {\n");
        sb.append("    ").append(toIndentedString(super.toString())).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    dropletIds: ").append(toIndentedString(dropletIds)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    sizeGigabytes: ").append(toIndentedString(sizeGigabytes)).append("\n");
        sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
        sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
        sb.append("    snapshotId: ").append(toIndentedString(snapshotId)).append("\n");
        sb.append("    region: ").append(toIndentedString(region)).append("\n");
        sb.append("    filesystemLabel: ").append(toIndentedString(filesystemLabel)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    static {
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
        mappings.put("EXT4", NewVolumeExt4.class);
        mappings.put("XFS", NewVolumeXfs.class);
        mappings.put("new_volume_ext4", NewVolumeExt4.class);
        JSON.registerDiscriminator(NewVolumeExt4.class, "filesystem_type", mappings);
    }
}