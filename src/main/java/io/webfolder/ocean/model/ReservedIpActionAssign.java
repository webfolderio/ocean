package io.webfolder.ocean.model;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;

import io.webfolder.ocean.JSON;

/**
 * ReservedIpActionAssign
 */
@JsonPropertyOrder({ ReservedIpActionAssign.JSON_PROPERTY_DROPLET_ID })
@JsonIgnoreProperties(value = "type", // ignore manually set type, it will be automatically
                                      // generated by Jackson during serialization
        allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({ @JsonSubTypes.Type(value = ReservedIpActionAssign.class, name = "assign"),
        @JsonSubTypes.Type(value = ReservedIpActionUnassign.class, name = "unassign"), })

public class ReservedIpActionAssign extends ReservedIpActionType {
    public static final String JSON_PROPERTY_DROPLET_ID = "droplet_id";
    private Integer dropletId;

    public ReservedIpActionAssign() {
    }

    public ReservedIpActionAssign dropletId(Integer dropletId) {
        this.dropletId = dropletId;
        return this;
    }

    /**
     * The ID of the Droplet that the reserved IP will be assigned to.
     *
     * @return dropletId
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_DROPLET_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public Integer getDropletId() {
        return dropletId;
    }

    @JsonProperty(JSON_PROPERTY_DROPLET_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setDropletId(Integer dropletId) {
        this.dropletId = dropletId;
    }

    /**
     * Return true if this reserved_ip_action_assign object is equal to o.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReservedIpActionAssign reservedIpActionAssign = (ReservedIpActionAssign) o;
        return Objects.equals(this.dropletId, reservedIpActionAssign.dropletId) && super.equals(o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(dropletId, super.hashCode());
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ReservedIpActionAssign {\n");
        sb.append("    ").append(toIndentedString(super.toString())).append("\n");
        sb.append("    dropletId: ").append(toIndentedString(dropletId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    static {
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
        mappings.put("assign", ReservedIpActionAssign.class);
        mappings.put("unassign", ReservedIpActionUnassign.class);
        mappings.put("reserved_ip_action_assign", ReservedIpActionAssign.class);
        JSON.registerDiscriminator(ReservedIpActionAssign.class, "type", mappings);
    }
}
