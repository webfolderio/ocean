package io.webfolder.ocean.model;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;

import io.webfolder.ocean.client.internal.JSON;

/**
 * VolumeWriteFileSystemType
 */
@JsonPropertyOrder({ VolumeWriteFileSystemType.JSON_PROPERTY_FILESYSTEM_TYPE })
@JsonIgnoreProperties(value = "filesystem_type", // ignore manually set filesystem_type, it will be
                                                 // automatically generated by Jackson during
                                                 // serialization
        allowSetters = true // allows the filesystem_type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "filesystem_type", visible = true)
@JsonSubTypes({ @JsonSubTypes.Type(value = NewVolumeExt4.class, name = "EXT4"),
        @JsonSubTypes.Type(value = NewVolumeXfs.class, name = "XFS"),
        @JsonSubTypes.Type(value = NewVolumeExt4.class, name = "new_volume_ext4"),
        @JsonSubTypes.Type(value = NewVolumeXfs.class, name = "new_volume_xfs"), })

public class VolumeWriteFileSystemType {
    public static final String JSON_PROPERTY_FILESYSTEM_TYPE = "filesystem_type";
    private String filesystemType;

    public VolumeWriteFileSystemType() {
    }

    public VolumeWriteFileSystemType filesystemType(String filesystemType) {
        this.filesystemType = filesystemType;
        return this;
    }

    /**
     * The name of the filesystem type to be used on the volume. When provided, the
     * volume will automatically be formatted to the specified filesystem type.
     * Currently, the available options are &#x60;ext4&#x60; and &#x60;xfs&#x60;.
     * Pre-formatted volumes are automatically mounted when attached to Ubuntu,
     * Debian, Fedora, Fedora Atomic, and CentOS Droplets created on or after April
     * 26, 2018. Attaching pre-formatted volumes to other Droplets is not
     * recommended.
     *
     * @return filesystemType
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_FILESYSTEM_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public String getFilesystemType() {
        return filesystemType;
    }

    @JsonProperty(JSON_PROPERTY_FILESYSTEM_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setFilesystemType(String filesystemType) {
        this.filesystemType = filesystemType;
    }

    /**
     * Return true if this volume_write_file_system_type object is equal to o.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VolumeWriteFileSystemType volumeWriteFileSystemType = (VolumeWriteFileSystemType) o;
        return Objects.equals(this.filesystemType, volumeWriteFileSystemType.filesystemType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(filesystemType);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class VolumeWriteFileSystemType {\n");
        sb.append("    filesystemType: ").append(toIndentedString(filesystemType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    static {
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
        mappings.put("EXT4", NewVolumeExt4.class);
        mappings.put("XFS", NewVolumeXfs.class);
        mappings.put("new_volume_ext4", NewVolumeExt4.class);
        mappings.put("new_volume_xfs", NewVolumeXfs.class);
        mappings.put("volume_write_file_system_type", VolumeWriteFileSystemType.class);
        JSON.registerDiscriminator(VolumeWriteFileSystemType.class, "filesystem_type", mappings);
    }
}