package io.webfolder.ocean.model;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;

import io.webfolder.ocean.JSON;

/**
 * FloatingIpActionUnassign
 */
@JsonPropertyOrder({})
@JsonIgnoreProperties(value = "type", // ignore manually set type, it will be automatically
                                      // generated by Jackson during serialization
        allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({ @JsonSubTypes.Type(value = FloatingIpActionAssign.class, name = "assign"),
        @JsonSubTypes.Type(value = FloatingIpActionUnassign.class, name = "unassign"), })

public class FloatingIpActionUnassign extends FloatingIpActionType {
    public FloatingIpActionUnassign() {
    }

    /**
     * Return true if this floating_ip_action_unassign object is equal to o.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        return super.equals(o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(super.hashCode());
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FloatingIpActionUnassign {\n");
        sb.append("    ").append(toIndentedString(super.toString())).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    static {
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
        mappings.put("assign", FloatingIpActionAssign.class);
        mappings.put("unassign", FloatingIpActionUnassign.class);
        mappings.put("floating_ip_action_unassign", FloatingIpActionUnassign.class);
        JSON.registerDiscriminator(FloatingIpActionUnassign.class, "type", mappings);
    }
}
