package io.webfolder.ocean.model;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;

import io.webfolder.ocean.client.internal.JSON;

/**
 * FloatingIpActionType
 */
@JsonPropertyOrder({ FloatingIpActionType.JSON_PROPERTY_TYPE })
@JsonIgnoreProperties(value = "type", // ignore manually set type, it will be automatically
                                      // generated by Jackson during serialization
        allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({ @JsonSubTypes.Type(value = FloatingIpActionAssign.class, name = "assign"),
        @JsonSubTypes.Type(value = FloatingIpActionAssign.class, name = "floating_ip_action_assign"),
        @JsonSubTypes.Type(value = FloatingIpActionUnassign.class, name = "floating_ip_action_unassign"),
        @JsonSubTypes.Type(value = FloatingIpActionUnassign.class, name = "unassign"), })

public class FloatingIpActionType {
    /**
     * The type of action to initiate for the floating IP.
     */
    public enum TypeEnum {
        ASSIGN("assign"),

        UNASSIGN("unassign");

        private String value;

        TypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static TypeEnum fromValue(String value) {
            for (TypeEnum b : TypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_TYPE = "type";
    private TypeEnum type;

    public FloatingIpActionType() {
    }

    public FloatingIpActionType type(TypeEnum type) {
        this.type = type;
        return this;
    }

    /**
     * The type of action to initiate for the floating IP.
     *
     * @return type
     **/
    @javax.annotation.Nonnull
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public TypeEnum getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)
    public void setType(TypeEnum type) {
        this.type = type;
    }

    /**
     * Return true if this floating_ip_action_type object is equal to o.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FloatingIpActionType floatingIpActionType = (FloatingIpActionType) o;
        return Objects.equals(this.type, floatingIpActionType.type);
    }

    @Override
    public int hashCode() {
        return Objects.hash(type);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FloatingIpActionType {\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    static {
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
        mappings.put("assign", FloatingIpActionAssign.class);
        mappings.put("floating_ip_action_assign", FloatingIpActionAssign.class);
        mappings.put("floating_ip_action_unassign", FloatingIpActionUnassign.class);
        mappings.put("unassign", FloatingIpActionUnassign.class);
        mappings.put("floating_ip_action_type", FloatingIpActionType.class);
        JSON.registerDiscriminator(FloatingIpActionType.class, "type", mappings);
    }
}